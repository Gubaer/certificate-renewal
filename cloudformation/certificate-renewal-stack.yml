#
# CloudFormation template for a stack which periodically and automatically
# renews, deploys, and configures a Let's-encrypt-SSL-certificate for a
# web site hosted on Amazon S3.
#
Resources:

  # the repository for the docker images
  CertificateRenewalRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: certificate-renewal

  # the log group where ECS creates log streams with log
  # events
  # 
  CertificateRenewalLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: certificate-renewal

  # the role the certificate renewal task assumes when executing
  CertificateRenewalExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CertificateRenewalExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com   # execution role for ECS tasks
                - ec2.amazonaws.com         # TODO: needed?
                - lambda.amazonaws.com      # execution role for lambda functions
                - events.amazonaws.com      # execution role for events

  # allows to create log streams and to put log events
  #
  # - allows the docker container to write to CloudWatch log streams
  # - allows the lambda function to write to CloudWatch log streams
  #
  CloudWatchLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CloudWatchLogPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
            Resource: "*"
      Roles:
        - Ref: CertificateRenewalExecutionRole

  # allows to read docker images from the certificate-renewal ECR
  # repository
  #
  EcrReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EcrReadPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:ListImages
              - ecr:BatchCheckLayerAvailability
              - ecr:GetRepositoryPolicy
            Resource: !GetAtt CertificateRenewalRepository.Arn
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
      Roles:
        - Ref: CertificateRenewalExecutionRole

  # allows to invoke an ECS task from a labmda function and to
  # an IAM role to the user executing the function
  #
  LambdaInvokeECSTaskPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaInvokeECSTaskPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              # to run a task
              - ecs:RunTask
              # to find out about latest task definition ARN
              - ecs:ListTaskDefinitions
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt CertificateRenewalExecutionRole.Arn
      Roles:
        - Ref: CertificateRenewalExecutionRole



  # allows to create/delete the certbot challenge in the S3 bucket
  # hosting the kacon.ch website
  KaconChWriteCertbotChallengePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: KaconChWriteCertbotChallenge
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
            Resource: arn:aws:s3:::www.kacon.ch/.well-known/acme-challenge/*
      Roles:
        - Ref: CertificateRenewalExecutionRole

  # allows to upload a new cloudfront server certificate
  UploadCloudfrontServerCertificatePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: UploadCloudfrontServerCertificate
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:UploadServerCertificate
            Resource: "*"
      Roles:
        - Ref: CertificateRenewalExecutionRole

  # allows to update cloudfront distributions. Required to assign the distribution
  # a new server certificate
  ManageCloudfrontDistributionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ManageCloudfrontDistribution
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cloudfront:GetDistributionConfig
              - cloudfront:UpdateDistribution
            Resource: "*"
      Roles:
        - Ref: CertificateRenewalExecutionRole

  # the task definition for the hello world task
  #
  CertificateRenewalTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: certificate-renewal
      TaskRoleArn: !GetAtt CertificateRenewalExecutionRole.Arn
      ExecutionRoleArn: !GetAtt CertificateRenewalExecutionRole.Arn
      Memory: 1024
      Cpu: 256
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: certificate-renewal
          #hack: assembling the repositoryUri of the HelloWorldRepository, should
          # result in an URI like
          #Image: 154819770423.dkr.ecr.eu-central-1.amazonaws.com/hello-world
          Image: !Join [".", [!Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join ["/", ["amazonaws.com", !Ref CertificateRenewalRepository]]]]
          Memory: 1024
          EntryPoint:
            - bash
          Command:
            - /certificate-renewal/renew.sh
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: certificate-renewal
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: certificate-renewal


  CertificateRenewalLambdaFunction: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: CertificateRenewal
      Description: "A lambda function to launch the 'certificate-renewal' ECS task "
      Handler: "certificate-renewal.handler"
      Role: 
        Fn::GetAtt: 
          - "CertificateRenewalExecutionRole"
          - "Arn"
      Code: 
        ZipFile: >
          exports.handler = function(event, context) {
            /* empty - will have to update later with the implementation */
          };
      Runtime: "nodejs8.10"
      Timeout: "25"


  # HelloWorldSchedulerRule: 
  #   Type: AWS::Events::Rule
  #   Properties: 
  #     Name: HelloWorldSchedulerRule
  #     Description: "Periodically triggers the lambda function 'HelloWorld'"
  #     ScheduleExpression: "rate(5 minutes)"
  #     State: "ENABLED"
  #     Targets: 
  #       - Id: "HelloWorldLambdaFunction"
  #         Arn: 
  #           Fn::GetAtt: 
  #             - "HelloWorldLambdaFunction"
  #             - "Arn"
          
  # PermissionToInvokeHelloWorldLambdaFromEvent: 
  #   Type: AWS::Lambda::Permission
  #   Properties: 
  #     FunctionName: 
  #       Ref: "HelloWorldLambdaFunction"
  #     Action: "lambda:InvokeFunction"
  #     Principal: "events.amazonaws.com"
  #     SourceArn: 
  #       Fn::GetAtt: 
  #         - "HelloWorldSchedulerRule"
  #         - "Arn"


