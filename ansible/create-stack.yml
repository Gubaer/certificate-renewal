- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    # check existence of config file ...
    - stat:
        path: config.yml
      register: config_file_status

    # ... and fail if it doesn't exist
    - fail:
        msg: |
          configuration file`'config.yml' doesn't exist. Copy the 
          template 'config.yml.distrib' and adjust the configuration
          settings.
      when: config_file_status.stat.isreg is undefined or config_file_status.stat.isreg == False 


- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - config.yml
  tasks:

    # make sure the env variables with the AWS credentials are set
    - include_role:
        name: env
        tasks_from: ensure-required-env
    
    # creates an AWS IAM role which is later used by the AWS ECS task
    # and the AWS Lambda function as 'executor role'.
    - name: create executor role
      iam:
        iam_type: role
        name: certificateRenewalExecutionRole
        state: present
        trust_policy:
          Version: '2012-10-17'
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
                  - events.amazonaws.com

    # remember the arn of the newly created execution role
    - iam_role_facts:
        name: certificateRenewalExecutionRole
      register: iam_role_facts_output
    - set_fact:
        certificateRenewalExecutionRoleArn: "{{ iam_role_facts_output.iam_roles[0].arn }}"

    # assign policies to the newly created execution role. This will empower
    # the role to read a docker image from the AWS ECS image repository, to
    # write to AWS logs, to invoke an ECS task, to create an AWS lambda function
    # in a VPC, to write the certification challenge to the S3 bucket, to 
    # upload the new server certificate, and to assign it to an AWS CloudFront
    # distribution

    - name: assign policy - allow to read from ECR repository
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: EcrReadPolicy
        # Resource is not restricted to a specific repo. Allows to
        # read from any ECR repository
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:DescribeImages",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetRepositoryPolicy"
                  ],
                  "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "ecr:GetAuthorizationToken",
                "Resource": "*"
              }
            ]
          }

    - name: assign policy - allow to create log streams and to put log events
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: CloudWatchLogPolicy
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
              }
            ]
          }

    - name: assign policy - allow to invoke an ECS task from a lambda function
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: LambdaInvokeECSTaskPolicy
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:RunTask",
                    "ecs:ListTaskDefinitions"
                  ],
                  "Resource": "*"
              },
              {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "{{ certificateRenewalExecutionRoleArn }}"
              }
            ]
          }

    - name: assign policy - allow to create an run a Lambda function in a VPC
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: CreateLambdaFunctionInVPC
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                      "ec2:DescribeInstances",
                      "ec2:CreateNetworkInterface",
                      "ec2:AttachNetworkInterface",
                      "ec2:DescribeNetworkInterfaces",
                      "ec2:DeleteNetworkInterface",
                      "autoscaling:CompleteLifecycleAction"
                  ],
                  "Resource": "*"
              }
            ]
          }

    - name: assign policy - allow to put the certbot challenge to a S3 bucket
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: PutCertbotChallengeToS3Bucket
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "s3:PutObject",
                "Resource": "arn:aws:s3:::{{ certificate_renewal.s3.bucket }}/*"
              }
            ]
          }

    - name: assign policy - allow to upload the server certificate
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: UploadServerCertificate
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "iam:UploadServerCertificate",
                "Resource": "*"
              }
            ]
          }

    - name: assign policy - allow to update cloudfront distribution
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: UpdateDistribution
        policy_json: >
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudfront:GetDistribution",
                          "cloudfront:UpdateDistribution"
                      ],
                      "Resource": "*"
                  }
              ]
          }
    # -- enf of policies

    # creates the AWS ECR repository. We later push our docker image
    # to this repository. Also remember the URI of this newly created
    # ECR repository.
    - name: create ECR repository
      ecs_ecr:
        name: certificate-renewal
        state: present
      register: ecr_repository
      tags:
        - create-ecr-repository
        - tag-docker-image
        - push-docker-image
    - set_fact:
        repositoryUri: "{{ ecr_repository.repository.repositoryUri }}"
      tags:
        - create-ecr-repository
        - tag-docker-image
        - push-docker-image

    # WORKAROUND: there is a bug in cloudwatchlogs_log_group. It fails if it
    # tries to create a log group which is already present.
    # We therefore check ourselves whether the log group exists and only 
    # try to create it, if doesn't exist yet.
    - cloudwatchlogs_log_group_facts:
        log_group_name: certificate-renewal
      register: cloudwatchlogs_log_group_facts_output
    - set_fact:
        numCertificateRenewalLogGroups: "{{ cloudwatchlogs_log_group_facts_output.log_groups | length }}"

    - name: create CloudWatch log group
      cloudwatchlogs_log_group:
        log_group_name: certificate-renewal
        state: present
      when: numCertificateRenewalLogGroups == "0"


    # Creates the ECS task definition for the task, which will be executed
    # to renew our certificate. Remember its ARN in the fact 'taskArn'.
    - name: create ECS task definition
      ecs_taskdefinition:
        family: certificate-renewal
        state: present
        network_mode: awsvpc
        execution_role_arn: "{{ certificateRenewalExecutionRoleArn }}"
        task_role_arn: "{{ certificateRenewalExecutionRoleArn }}"
        launch_type: FARGATE
        cpu: "256"
        memory: "1024"
        containers:
          - name: certificate-renewal
            entryPoint: 
              - /bin/sh
              - "-c"
            image: "{{ repositoryUri }}"
            command: 
              - > 
                /bin/sh -c "/usr/bin/python3 /certificate-renewal/renew-certificate.py --remove-certbot-dir"
            logConfiguration:
              logDriver: awslogs
              options:
                awslogs-group: certificate-renewal
                awslogs-region: "{{ lookup('env', 'AWS_REGION') }}"
                awslogs-stream-prefix: certificate-renewal
      register: ecs_task
    - set_fact:
        taskArn: "{{ecs_task.taskdefinition.taskDefinitionArn }}"

    # Make sure we have default ECS cluster
    - name: create ECS cluster
      ecs_cluster:
        name: default
        state: present

    # creates the deployment package for our AWS Lambda function
    - name: build lambda function zip
      shell: >
        cd ../lambda/certificate-renewal && make zip
      tags:
        - build-lambda-function

    # Create the lambda function and remember its ARN in the fact 
    # 'lambdaFunctionArn'
    #
    - name: create lambda function
      lambda:
        name: certificate-renewal
        state: present
        timeout: 300
        role: "{{ certificateRenewalExecutionRoleArn }}"
        handler: certificate_renewal.handler
        runtime: python3.6
        vpc_subnet_ids: "{{ certificate_renewal.lambda.vpc_subnet_ids }}"
          #- "{{ certificate_renewal.lambda.vpc_subnet_id }}"
        vpc_security_group_ids:
          - "{{ certificate_renewal.lambda.vpc_security_group_id }}"
        zip_file: "../lambda/certificate-renewal/certificate-renewal.zip"
        environment_variables:
          SECURITY_GROUP: "{{ certificate_renewal.lambda.vpc_security_group_id }}"
          SUBNET: "{{ certificate_renewal.lambda.vpc_subnet_ids[0] }}"
      # WORKAROUND: race condition. Need to wait until the policy 
      # CreateLambdaFunctionInVPC assigned to the executor role is visible
      retries: 5
      delay: 10
      register: lambda_result
      until: lambda_result is success

    - name: read lambda function facts
      lambda_facts:
        function_name: certificate-renewal
        query: all
      register: lambda_function_facts_output

    - set_fact:
        lambdaFunctionArn: "{{ lambda_function_facts_output.ansible_facts.lambda_facts.function[\"certificate-renewal\"].function_arn }}"


    # Creates the CloudWatch scheduler rule which will periodically trigger
    # our AWS Lambda function to renew the certificate, and remembers 
    # its ARN in the fact 'cloudwatchRuleArn'
    - name: create CloudWatch scheduler rule
      cloudwatchevent_rule:
        name: CertificateRenewalRule
        state: present
        description: "Triggers the CertificateRenewal Lambda function"
        # first day of month, at 1am
        schedule_expression: "cron(0 1 1 * ? *)"
        targets:
          - id: CertificateRenewalTarget
            arn: "{{ lambdaFunctionArn }}"
      register: cloudwatch_rule_output

    - set_fact:
        cloudwatchRuleArn: "{{ cloudwatch_rule_output.rule.arn }}"

    - name: allow CloudWatch events to invoke the lambda function
      lambda_policy:
        state: present
        function_name: certificate-renewal
        statement_id: lambda_certificate_renewal_cloudwatchRule
        action: lambda:InvokeFunction
        principal: events.amazonaws.com
        source_arn: "{{ cloudwatchRuleArn }}"

    #TODO(karl): find a solution to automatically create/delete a VPC endpoint, 
    #   for the time being manage it manually
    #
    # - name: create vpc endpoint in order to access ECS API
    #   ec2_vpc_endpoint:
    #     state: present
    #     region: "{{ lookup('env', 'AWS_REGION') }}"
    #     #TODO: provide configuration entry
    #     vpc_id: vpc-1f250674
    #     service: "com.amazonaws.{{ lookup('env', 'AWS_REGION') }}.ecs"
    #     policy: >
    #      {"Statement": [
    #          { "Action": "*",
    #            "Effect": "Allow",
    #            "Principal": "*",
    #            "Resource":"*"
    #          }
    #       ]}

    - name: create config file renew-certificate.conf
      template:
        src: renew-certificate.conf.j2
        dest: renew-certificate.conf.generated
      tags:
        - create-docker-image
        - create-config
        
    - name: create docker image
      docker_image:
        source: build
        state: present
        name: certificate-renewal:latest
        force_source: true
        build:
          dockerfile: docker/Dockerfile.alpine
          path: ../
          pull: yes
          args:
            RENEW_CERTIFICATE_CONF_PATH: ansible/renew-certificate.conf.generated
      tags:
        - create-docker-image

    - name: log into ECR repository
      shell: "$(aws ecr get-login --no-include-email --region {{ lookup('env', 'AWS_REGION') }})"
      tags:
        - ecr-login
        - tag-docker-image

    - name: tag docker image with ECR repository URI
      docker_image:
        name: certificate-renewal
        repository: "{{ repositoryUri }}"
        state: present
        source: local
        force_tag: true
        build:
          pull: no
      tags:
        - tag-docker-image

    - name: push image to ECR repository
      docker_image:
        push: yes
        source: local
        name: "{{ repositoryUri }}"
      tags:
        - push-docker-image
