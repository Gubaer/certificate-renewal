- hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    # check existence of config file ...
    - stat:
        path: config.yml
      register: config_file_status

    # ... and fail if it doesn't exist
    - fail:
        msg: |
          configuration file`'config.yml' doesn't exist. Copy the 
          template 'config.yml.distrib' and adjust the configuration
          settings.
      when: config_file_status.stat.isreg is undefined or config_file_status.stat.isreg == False 


- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - config.yml
  tasks:

    # make sure the env variables with the AWS credentials are set
    - include_role:
        name: env
        tasks_from: ensure-required-env

    - name: create executor role
      iam:
        iam_type: role
        name: certificateRenewalExecutionRole
        state: present
        trust_policy:
          Version: '2012-10-17'
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - ec2.amazonaws.com
                  - ecs-tasks.amazonaws.com
                  - events.amazonaws.com

    - iam_role_facts:
        name: certificateRenewalExecutionRole
      register: iam_role_facts_output

    - set_fact:
        certificateRenewalExecutionRoleJson: "{{ iam_role_facts_output.iam_roles[0] }}"

    - name: assign policy - allow to read from ECR repository
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: EcrReadPolicy
        # Resource is not restricted to a specific repo. Allows to
        # read from any ECR repository
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:DescribeImages",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetRepositoryPolicy"
                  ],
                  "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "ecr:GetAuthorizationToken",
                "Resource": "*"
              }
            ]
          }

    - name: assign policy - allow to create log streams and to put log events
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: CloudWatchLogPolicy
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
              }
            ]
          }

    - name: assign policy - allow to invoke an ECS task from a lambda function
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: LambdaInvokeECSTaskPolicy
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:RunTask",
                    "ecs:ListTaskDefinitions"
                  ],
                  "Resource": "*"
              },
              {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "{{ certificateRenewalExecutionRoleJson.arn }}"
              }
            ]
          }

    - name: assign policy - allow to create an run a Lambda function in a VPC
      iam_policy:
        iam_type: role
        state: present
        iam_name: certificateRenewalExecutionRole
        policy_name: CreateLambdaFunctionInVPC
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface"
                  ],
                  "Resource": "*"
              }
            ]
          }

    - name: create ECR repository
      ecs_ecr:
        name: certificate-renewal
        state: present
      register: ecr_repository
      tags:
        - create-ecr-repository
        - tag-docker-image
        - push-docker-image

    - set_fact:
        repositoryUri: "{{ ecr_repository.repository.repositoryUri }}"
      tags:
        - create-ecr-repository
        - tag-docker-image
        - push-docker-image

    - name: create CloudWatch log group
      cloudwatchlogs_log_group:
        log_group_name: certificate-renewal
        state: present

    - name: create ECS task definition
      ecs_taskdefinition:
        family: certificate-renewal
        state: present
        network_mode: awsvpc
        execution_role_arn: "{{ certificateRenewalExecutionRoleJson.arn }}"
        launch_type: FARGATE
        cpu: 256
        memory: 1024
        containers:
          - name: certificate-renewal
            entryPoint: 
              - bash
            image: certificate-renewal
            command: 
              - /certificate-renewal/renew-certificate.py
            logConfiguration:
              logDriver: awslogs
              options:
                awslogs-group: certificate-renewal
                awslogs-region: eu-central-1
                awslogs-stream-prefix: certificate-renewal

    - name: create ECS cluster
      ecs_cluster:
        name: default
        state: present

    - name: build Lamba function zip
      shell: >
        cd ../lambda/certificate-renewal && npm run assemble
      tags:
        - build-lambda-function

    - name: create Lambda function
      lambda:
        name: CertificateRenewal
        state: present
        timeout: 60
        role: "{{ certificateRenewalExecutionRoleJson.arn }}"
        handler: certificate_renewal.handler
        runtime: nodejs8.10
        vpc_subnet_ids:
          - "{{ certificate_renewal.lambda.vpc_subnet_id }}"
        vpc_security_group_ids:
          - "{{ certificate_renewal.lambda.vpc_security_group_id }}"
        zip_file: "../lambda/certificate-renewal/certificate-renewal.zip"
        environment_variables:
          SECURITY_GROUP: "{{ certificate_renewal.lambda.vpc_security_group_id }}"
          SUBNET: "{{ certificate_renewal.lambda.vpc_subnet_id }}"

    - name: read Lambda function facts
      lambda_facts:
        function_name: CertificateRenewal
        query: all
      register: lambda_function_facts_output

    - set_fact:
        lambdaFunctionArn: "{{ lambda_function_facts_output.ansible_facts.lambda_facts.function.CertificateRenewal.function_arn }}"

    - name: create CloudWatch scheduler rule
      cloudwatchevent_rule:
        name: CertificateRenewalRule
        state: present
        description: "Triggers the CertificateRenewal Lambda function"
        schedule_expression: "rate(12 hours)"
        targets:
          - id: CertificateRenewalTarget
            arn: "{{ lambdaFunctionArn }}"

    - name: create config file renew-certificate.conf
      template:
        src: renew-certificate.conf.j2
        dest: renew-certificate.conf.generated
      tags:
        - create-docker-image
        - create-config
        
    - name: create docker image
      docker_image:
        path: ../
        dockerfile: docker/Dockerfile.alpine
        state: present
        name: certificate-renewal:latest
        force: true
        buildargs:
          RENEW_CERTIFICATE_CONF_PATH: ansible/renew-certificate.conf.generated
      tags:
        - create-docker-image

    - name: log into ECR repository
      shell: "$(aws ecr get-login --no-include-email --region {{ lookup('env', 'AWS_REGION') }})"
      tags:
        - ecr-login
        - tag-docker-image

    - name: tag docker image with ECR repository URI
      docker_image:
        name: certificate-renewal
        repository: "{{ repositoryUri }}"
        state: present
        pull: no
      tags:
        - tag-docker-image

    - name: push image to ECR repository
      docker_image:
        push: yes
        name: "{{ repositoryUri }}"
      tags:
        - push-docker-image
